{
  "language": "Solidity",
  "sources": {
    "contracts/BuyAProduct.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract EcommercePlatform {\n    address payable public owner;\n    mapping(string => uint256) public productPrices; \n    mapping(string => mapping(address => uint256)) public productQuantities;\n\n    event ProductPurchased(string  product, address indexed buyer, uint256 quantity, uint256 totalPrice); \n    event ProductAdded(string  product, uint256 quantity, uint256 price); \n\n    error InsufficientFunds();\n    error ProductNotAvailable();\n\n    constructor() {\n        owner = payable(msg.sender);\n    }\n\n    /**\n     * @dev Function to purchase a product\n     * @param product The name of the product\n     * @param quantity The quantity of the product to purchase\n     */\n    function purchaseProduct(string memory product, uint256 quantity) public payable {\n        uint256 totalPrice = productPrices[product] * quantity;\n        require(msg.value >= totalPrice, \"Insufficient funds\");\n\n        if (productQuantities[product][msg.sender] < quantity) {\n            revert ProductNotAvailable();\n        }\n\n        owner.transfer(totalPrice);\n\n        productQuantities[product][msg.sender] -= quantity;\n\n        emit ProductPurchased(product, msg.sender, quantity, totalPrice);\n    }\n\n    /**\n     * @dev Function to add product quantities\n     * @param product The name of the product\n     * @param quantity The quantity of the product to add\n     * @param price The price of the product\n     */\n    function addProductQuantity(string memory product, uint256 quantity, uint256 price) public {\n        productQuantities[product][msg.sender] += quantity;\n        productPrices[product] = price;\n        emit ProductAdded(product, quantity, price);\n    }\n\n    /**\n     * @dev Function to withdraw the contract balance\n     */\n    function withdraw() public {\n        require(msg.sender == owner, \"Only the owner can withdraw\");\n        owner.transfer(address(this).balance);\n    }\n\n    /**\n     * @dev Function to get the contract balance\n     */\n    function getBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    /**\n     * @dev Fallback function to receive Ether\n     */\n    receive() external payable {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}